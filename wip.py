import json
import urlfunctions
import operator
import subprocess
import itertools

# http://www.amazon.com/kindleformat/kindlegen
KINDLEGEN_PATH = 'Kindlegen/kindlegen'

urlCache = urlfunctions.UrlCache("cache")

URLS = [
    "https://tabs.ultimate-guitar.com/tab/jeff-buckley/hallelujah-chords-198052",
    "https://tabs.ultimate-guitar.com/tab/oasis/wonderwall-chords-27596",
    "https://tabs.ultimate-guitar.com/tab/eagles/hotel-california-chords-46190",
    "https://tabs.ultimate-guitar.com/tab/led-zeppelin/stairway-to-heaven-tabs-9488",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/yesterday-chords-17450",
    "https://tabs.ultimate-guitar.com/tab/adele/someone-like-you-chords-1006751",
    "https://tabs.ultimate-guitar.com/tab/oasis/dont-look-back-in-anger-chords-6097",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/let-it-be-chords-60690",
    "https://tabs.ultimate-guitar.com/tab/john-lennon/imagine-chords-9306",
    "https://tabs.ultimate-guitar.com/tab/elton-john/your-song-chords-29113",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/hey-jude-chords-1061739",
    "https://tabs.ultimate-guitar.com/tab/david-bowie/space-oddity-chords-105869",
    "https://tabs.ultimate-guitar.com/tab/israel-kamakawiwoole/over-the-rainbow-chords-2135261",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/yesterday-chords-887610",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/something-chords-335727",
    "https://tabs.ultimate-guitar.com/tab/neil-young/heart-of-gold-chords-56555",
    "https://tabs.ultimate-guitar.com/tab/joan-baez/diamonds-and-rust-chords-1044414",
    "https://tabs.ultimate-guitar.com/tab/jean-jacques-goldman/comme-toi-chords-69704",
    "https://tabs.ultimate-guitar.com/tab/queen/love-of-my-life-chords-340088",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/let-it-be-chords-17427",
    "https://tabs.ultimate-guitar.com/tab/nirvana/the-man-who-sold-the-world-chords-651988",
    "https://tabs.ultimate-guitar.com/tab/metallica/nothing-else-matters-tabs-8519",
    "https://tabs.ultimate-guitar.com/tab/moriarty/jimmy-chords-790948",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/here-there-and-everywhere-chords-17273",
]


def string_to_html_id(s):
    return "".join(c if c.isalnum() else '-' for c in s)


def get_data_from_url(url):
    soup = urlCache.get_soup(url)
    # title = soup.find("meta", property="og:title")["content"]
    # desc = soup.find("meta", property="og:description")["content"]

    json_content = json.loads(soup.find("div", class_="js-store")["data-content"])
    page_data = json_content['store']['page']['data']
    with open('debug.json', 'w+') as f:
        json.dump(page_data, f, indent=4, sort_keys=True)

    tab = page_data['tab']
    tab_view = page_data['tab_view']
    tab_view_meta = tab_view['meta']

    assert url == tab['tab_url']

    # TODO: chords
    indiv_chords = tab_view['applicature']

    # TODO: strumming
    # print(tab_view['encode_strummings'])
    # print(tab_view['strummings'])
    # print()

    return {
        'song_name': tab['song_name'],
        'artist_name': tab['artist_name'],
        'url': url,
        'artist_url': tab['artist_url'],
        'type_name': tab['type_name'],
        'version': tab['version'],
        'author': tab['username'],
        'rating': tab['rating'],
        'votes': tab['votes'],
        'capo': tab_view_meta.get('capo', None),
        'tonality': tab_view_meta.get('tonality', None),
        'difficulty': tab_view_meta.get('difficulty', None),
        'tuning': tab_view_meta.get('tuning', dict()).get('name', None),
        'tab_content': tab_view['wiki_tab']['content'],
        'chords': indiv_chords if indiv_chords is not None else dict(),
        'html_anchor': str(tab['id']) + "-" + string_to_html_id(tab['song_name']),
    }



htmlfile = "book.html"
header = """
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Tabs and Chords</title>
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<h1>Tabs and Chords</h1>"""
# TODO: Add 'generated by'

footer = """
</body>
</html>
"""

toc_begin = """<a id="TOC" />
<h2>Table of contents</h2>
"""
pagebreak = """<mbp:pagebreak />
"""
start = """<a name="start" />
"""

tabs = [get_data_from_url(url) for url in URLS]
tabs.sort(key=itemgetter('song_name'))  # Or any other criteria

all_chords = dict()
for t in tabs:
    chords = t['chords']
    for name, details in chords.items():
        if name in all_chords:
            assert details == all_chords[name]
        else:
            all_chords[name] = details

chord_anchors = { name: string_to_html_id(name) for name in all_chords }

opt_fields = [
    ('capo', 'Capo'),
    ('tonality', 'Tonality'),
    ('difficulty', 'Difficulty'),
    ('tuning', 'Tuning'),
]

with open(htmlfile, 'w+') as book:
    # header
    book.write(header)
    book.write(pagebreak)
    # table of content
    book.write(toc_begin)
    book.write("""<h2><a href="#tabs">Tabs</a></h2>\n""")
    book.write("""<h3>By title</h3>\n""")
    for t in sorted(tabs, key=operator.itemgetter('song_name')):
        book.write("""<a href="#tab%s">%s - %s</a><br />
""" % (t['html_anchor'], t['song_name'], t['artist_name']))
    book.write("""<h3>By artist</h3>\n""")
    for artist, artist_tabs in itertools.groupby(
        sorted(tabs, key=operator.itemgetter('artist_name')), key=operator.itemgetter('artist_name')):
        book.write("""<h4>%s</h4>\n""" % artist)
        for t in sorted(artist_tabs, key=operator.itemgetter('song_name')):
            book.write("""<a href="#tab%s">%s</a><br />
""" % (t['html_anchor'], t['song_name']))
    book.write("""<h2><a href="#chords">Chords</a></h2>\n""")
    for c in all_chords:
        book.write("""<a href="#chord%s">%s</a><br />
""" % (chord_anchors[c], c))
    book.write(pagebreak)
    book.write(start)
    # tab content
    book.write("""<a name="tabs" />""")
    for t in tabs:
        book.write("""<a name="tab%s" />
<h2 class="chapter">%s - <a href="%s">%s</a></h2>
<a href="%s">%s version %d from %s (rated %f / %d votes)</a><br />
""" % (t['html_anchor'], t['song_name'], t['artist_url'], t['artist_name'], t['url'], t['type_name'], t['version'], t['author'], t['rating'], t['votes']))
        for opt_field, opt_name in opt_fields:
            val = t[opt_field]
            if val is not None:
                book.write("""%s: %s<br />
""" % (opt_name, val))
        for c, val in t['chords'].items():
            book.write("""%s<a href="#chord%s">%s</a>: %s<br />
""" % ("&nbsp;" * (10 - len(c)), chord_anchors[c], c, val[0]['id']))
        book.write(pagebreak)
        book.write("""<p class="noindent">
%s
</p>""" % t['tab_content']
            .replace(' ', '&nbsp;')
            .replace('\r\n', '<br/>\r\n')
            .replace('[tab]', '')
            .replace('[/tab]', '')
            .replace('[ch]', '')
            .replace('[/ch]', '')
        )
        book.write(pagebreak)
    # chord content
    book.write("""<a name="chords" />""")
    for c, values in all_chords.items():
        book.write("""<a name="chord%s" />
<h2>%s</h2>""" % (chord_anchors[c], c))
        for i, v in enumerate(values):
            book.write("%d: %s<br/>\n" % (i, v['id']))
        book.write(pagebreak)

    # footer
    book.write(footer)

print("Wrote in %s" % htmlfile)

subprocess.call([KINDLEGEN_PATH, '-verbose', '-dont_append_source', htmlfile])
