import json
import urlfunctions
from operator import itemgetter

urlCache = urlfunctions.UrlCache("cache")

URLS = [
    "https://tabs.ultimate-guitar.com/tab/jeff-buckley/hallelujah-chords-198052",
    "https://tabs.ultimate-guitar.com/tab/oasis/wonderwall-chords-27596",
    "https://tabs.ultimate-guitar.com/tab/eagles/hotel-california-chords-46190",
    "https://tabs.ultimate-guitar.com/tab/led-zeppelin/stairway-to-heaven-tabs-9488",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/yesterday-chords-17450",
    "https://tabs.ultimate-guitar.com/tab/adele/someone-like-you-chords-1006751",
    "https://tabs.ultimate-guitar.com/tab/oasis/dont-look-back-in-anger-chords-6097",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/let-it-be-chords-60690",
    "https://tabs.ultimate-guitar.com/tab/john-lennon/imagine-chords-9306",
    "https://tabs.ultimate-guitar.com/tab/elton-john/your-song-chords-29113",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/hey-jude-chords-1061739",
    "https://tabs.ultimate-guitar.com/tab/david-bowie/space-oddity-chords-105869",
    "https://tabs.ultimate-guitar.com/tab/israel-kamakawiwoole/over-the-rainbow-chords-2135261",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/yesterday-chords-887610",
    "https://tabs.ultimate-guitar.com/tab/the-beatles/something-chords-335727",
    "https://tabs.ultimate-guitar.com/tab/neil-young/heart-of-gold-chords-56555",
    "https://tabs.ultimate-guitar.com/tab/joan-baez/diamonds-and-rust-chords-1044414",
]

def get_data_from_url(url):
    soup = urlCache.get_soup(url)
    # title = soup.find("meta", property="og:title")["content"]
    # desc = soup.find("meta", property="og:description")["content"]

    json_content = json.loads(soup.find("div", class_="js-store")["data-content"])
    page_data = json_content['store']['page']['data']
    with open('debug.json', 'w+') as f:
        json.dump(page_data, f, indent=4, sort_keys=True)

    tab = page_data['tab']
    tab_view = page_data['tab_view']
    tab_view_meta = tab_view['meta']

    assert url == tab['tab_url']
 
    full_chords = tab_view['wiki_tab']['content']
    indiv_chords = tab_view['applicature']
    #print(indiv_chords.keys() if indiv_chords else 'No individual chords')

    return {
        'song_name': tab['song_name'],
        'artist_name': tab['artist_name'],
        'url': url,
        'artist_url': tab['artist_url'],
        'type_name': tab['type_name'],
        'version': tab['version'],
        'author': tab['username'],
        'rating': tab['rating'],
        'votes': tab['votes'],
        'capo': tab_view_meta.get('capo', None),
        'tonality': tab_view_meta.get('tonality', None),
        'difficulty': tab_view_meta.get('difficulty', None),
        'tuning': tab_view_meta.get('tuning', dict()).get('name', None),
    }



htmlfile = "book.html"
header = """
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Tabs and Chords</title>
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<h1>Tabs and Chords</h1>"""
# TODO: Add 'generated by'

footer = """
</body>
</html>
"""

toc_begin = """<a id="TOC" />
<h2>Table of contents</h2>
"""
pagebreak = """<mbp:pagebreak />
"""
start = """<a name="start" />
"""

tabs = [get_data_from_url(url) for url in URLS]
tabs.sort(key=itemgetter('song_name'))  # Or any other criteria

opt_fields = [
    ('capo', 'Capo'),
    ('tonality', 'Tonality'),
    ('difficulty', 'Difficulty'),
    ('tuning', 'Tuning'),
]

with open(htmlfile, 'w+') as book:
    # header
    book.write(header)
    book.write(pagebreak)
    # table of content
    book.write(toc_begin)
    for i, t in enumerate(tabs):
        book.write("""<a href="#tab%d">%s - %s</a><br />
""" % (i, t['song_name'], t['artist_name']))
    book.write(pagebreak)
    # real content
    book.write(start)
    for i, t in enumerate(tabs):
        book.write("""<a name="tab%d" />
<h2 class="chapter">%s - <a href="%s">%s</a></h2>
<a href="%s">%s version %d from %s (rated %f / %d votes)</a><br />
""" % (i, t['song_name'], t['artist_url'], t['artist_name'], t['url'], t['type_name'], t['version'], t['author'], t['rating'], t['votes']))
        for opt_field, opt_name in opt_fields:
            val = t[opt_field]
            if val is not None:
                book.write("""%s: %s<br />
""" % (opt_name, val))
        book.write("""<p class="noindent">
raw tab
</p>""")
        book.write(pagebreak)
    # footer
    book.write(footer)

print("Wrote in %s" % htmlfile)
