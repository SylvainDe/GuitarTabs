import subprocess
import itertools
import htmlformatter as HtmlFormatter

from tabs import AbstractGuitarTab as Tab
from chords import AbstractChords as Chords


# https://kdp.amazon.com/en_US/help/topic/G200673180 "Supported HTML Tags in Book Content "
# http://www.amazon.com/kindleformat/kindlegen
KINDLEGEN_PATH = 'Kindlegen/kindlegen'


def my_groupby(iterable, key=None):
    return itertools.groupby(sorted(iterable, key=key), key=key)


def get_html_head():
    return HtmlFormatter.head()\
        .add(HtmlFormatter.meta(attrs={'http-equiv': "Content-type", 'content': "text/html;charset=utf-8"}))\
        .add(HtmlFormatter.meta(attrs={'name': "cover", 'content': "empty.jpg"}))\
        .add(HtmlFormatter.title(content="Tabs and Chords"))\
        .add(HtmlFormatter.link(rel="stylesheet", href="default.css", type="text/css"))


def get_html_body(tabs, chords):
    heading = HtmlFormatter.h
    link = HtmlFormatter.a
    body = HtmlFormatter.body()
    body.add(heading(1, "Tabs and Chords"))  # TODO: Add 'generated by'
    body.add(HtmlFormatter.pagebreak)
    # table of content
    body.add(link(id="TOC"))
    body.add("\n")
    body.add(heading(2, "Table of contents"))
    body.add(heading(3, link(href="#tabs", content="Meta table of content")))
    body.add(heading(4, link(href="#toc_tabs", content="Tabs")))
    body.add(heading(5, link(href="#toc_tabs_by_title", content="By title")))
    body.add(heading(5, link(href="#toc_tabs_by_artist", content="By artist")))
    body.add(heading(5, link(href="#toc_tabs_by_diff", content="By difficulty")))
    body.add(heading(5, link(href="#toc_tabs_by_type", content="By type")))
    body.add(heading(4, link(href="#toc_chords", content="Chords")))
    body.add(heading(5, link(href="#toc_chords_by_name", content="By name")))
    body.add(heading(5, link(href="#toc_chords_by_type", content="By type")))
    body.add(heading(3, link(href="#toc_tabs") + link(href="#tabs", content="Tabs")))
    body.add(link(name="toc_tabs"))
    body.add(heading(4, link(name="toc_tabs_by_title") + "By title"))
    for t in sorted(tabs, key=Tab.by_name):
        body.add(t.get_link())
        body.add(HtmlFormatter.new_line)
    body.add(heading(4, link(name="toc_tabs_by_artist") + "By artist"))
    for artist, tabs_grouped in my_groupby(tabs, key=Tab.by_artist):
        body.add(heading(5, artist))
        for t in sorted(tabs_grouped, key=Tab.by_name):
            body.add(t.get_link(display_artist=False))
            body.add(HtmlFormatter.new_line)
    body.add(heading(4, link(name="toc_tabs_by_diff") + "By difficulty"))
    for diff, tabs_grouped in my_groupby(tabs, key=Tab.by_difficulty):
        body.add(heading(5, diff))
        for t in sorted(tabs_grouped, key=Tab.by_name):
            body.add(t.get_link())
            body.add(HtmlFormatter.new_line)
    body.add(heading(4, link(name="toc_tabs_by_type") + "By type"))
    for type_name, tabs_grouped in my_groupby(tabs, key=Tab.by_type):
        body.add(heading(5, type_name))
        for t in sorted(tabs_grouped, key=Tab.by_name):
            body.add(t.get_link(display_type=False))
            body.add(HtmlFormatter.new_line)
    body.add(heading(4, link(name="toc_tabs_by_src") + "By website"))
    for src, tabs_grouped in my_groupby(tabs, key=Tab.by_src):
        body.add(heading(5, src))
        for t in sorted(tabs_grouped, key=Tab.by_name):
            body.add(t.get_link(display_src=False))
            body.add(HtmlFormatter.new_line)
    body.add(heading(3, link(name="toc_chords") + link(href="#chords", content="Chords")))
    body.add(heading(4, link(name="toc_chords_by_name") + "By name"))
    for c in sorted(chords, key=Chords.by_name):
        body.add(c.get_link(display_type=True))
        body.add(HtmlFormatter.new_line)
    body.add(heading(4, link(name="toc_chords_by_type") + "By type"))
    for type_name, chords_grouped in my_groupby(chords, key=Chords.by_type):
        body.add(heading(5, type_name))
        for c in sorted(chords_grouped, key=Chords.by_name):
            body.add(c.get_link(display_type=False))
            body.add(HtmlFormatter.new_line)
    body.add(HtmlFormatter.pagebreak)
    body.add(link(name="start") + "\n")
    # tab content
    body.add(link(name="tabs"))
    for t in sorted(tabs, key=Tab.by_name):
        body.add(t.get_html_content())
    # chord content
    body.add(link(name="chords"))
    for c in sorted(chords, key=Chords.by_name):
        body.add(c.get_html_content())

    return body


def make_book(tabs, chords, htmlfile, make_mobi=True):
    html = HtmlFormatter.html().add(get_html_head()).add(get_html_body(tabs, chords))
    with open(htmlfile, 'w+') as book:
        book.write(HtmlFormatter.doctype + str(html))
    print("Wrote in %s" % htmlfile)
    if make_mobi:
        subprocess.call([KINDLEGEN_PATH, '-verbose', '-dont_append_source', htmlfile])
